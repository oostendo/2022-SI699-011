{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "local-texas",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import re"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "criminal-thesis",
   "metadata": {},
   "outputs": [],
   "source": [
    "def map_code_values(category_code_list, print_errors=False):\n",
    "    equal_split = re.compile(r'\\s?=\\s?')\n",
    "    cont_num_range = re.compile(r'\\d+\\s?-\\s?\\d+')\n",
    "    code_map = {}\n",
    "    error_map = {}\n",
    "    i = 0 # col index\n",
    "    for code_list in category_code_list:\n",
    "        # check codes to follow \"num = category pattern\"\n",
    "        if 'no code' in code_list:\n",
    "            code_list = ['no code = continuous numerical value']\n",
    "        if bool(cont_num_range.search(code_list[0])) == True:\n",
    "            # if numerical range is first ie \"1 - 10\"\n",
    "            code_list[0] = code_list[0] + ' = continuous numerical range'\n",
    "        elif bool(cont_num_range.search(code_list[-1])) == True:\n",
    "            # if numerical range is last ie \"1946 - 2012\"\n",
    "            code_list[-1] = code_list[-1] + ' = continuous numerical range'\n",
    "        elif 'continued' in code_list[-1]:\n",
    "            # if (continued in next cell) is last, delete from list\n",
    "            del code_list[-1]\n",
    "\n",
    "        # convert codes to dict\n",
    "        try:\n",
    "            code_map[i] = dict([re.split(equal_split.pattern, code.replace(\"'\", \"\").strip()) for code in code_list])\n",
    "        except ValueError as e:\n",
    "            error_map[i] = (code_list, e)\n",
    "        \n",
    "        # increment col index\n",
    "        i += 1\n",
    "    if print_errors == True:\n",
    "        for k,v in error_map.items():\n",
    "            print(f'codelist: {k} | error: {v}\\n-----------')\n",
    "    return code_map"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "lovely-studio",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>category</th>\n",
       "      <th>file_order</th>\n",
       "      <th>col_name</th>\n",
       "      <th>col_type</th>\n",
       "      <th>length</th>\n",
       "      <th>format</th>\n",
       "      <th>col_description</th>\n",
       "      <th>codes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>PUBID</td>\n",
       "      <td>Char</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Building identifier</td>\n",
       "      <td>00001 - 06720</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>REGION</td>\n",
       "      <td>Char</td>\n",
       "      <td>1.0</td>\n",
       "      <td>$REGION.</td>\n",
       "      <td>Census region</td>\n",
       "      <td>'1' = 'Northeast'\\r\\n'2' = 'Midwest'\\r\\n'3' = ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>CENDIV</td>\n",
       "      <td>Char</td>\n",
       "      <td>1.0</td>\n",
       "      <td>$CENDIV.</td>\n",
       "      <td>Census division</td>\n",
       "      <td>'1' = 'New England'\\r\\n'2' = 'Middle Atlantic'...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>PBA</td>\n",
       "      <td>Char</td>\n",
       "      <td>2.0</td>\n",
       "      <td>$PBA.</td>\n",
       "      <td>Principal building activity</td>\n",
       "      <td>'01' = 'Vacant'\\r\\n'02' = 'Office'\\r\\n'04' = '...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>5.0</td>\n",
       "      <td>FREESTN</td>\n",
       "      <td>Char</td>\n",
       "      <td>1.0</td>\n",
       "      <td>$YES.</td>\n",
       "      <td>Freestanding building</td>\n",
       "      <td>1' = 'Yes'\\r\\nMissing='No'</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  category  file_order col_name col_type  length    format  \\\n",
       "0        0         1.0    PUBID     Char     5.0       NaN   \n",
       "1        0         2.0   REGION     Char     1.0  $REGION.   \n",
       "2        0         3.0   CENDIV     Char     1.0  $CENDIV.   \n",
       "3        0         4.0      PBA     Char     2.0     $PBA.   \n",
       "4        1         5.0  FREESTN     Char     1.0     $YES.   \n",
       "\n",
       "               col_description  \\\n",
       "0          Building identifier   \n",
       "1                Census region   \n",
       "2              Census division   \n",
       "3  Principal building activity   \n",
       "4        Freestanding building   \n",
       "\n",
       "                                               codes  \n",
       "0                                      00001 - 06720  \n",
       "1  '1' = 'Northeast'\\r\\n'2' = 'Midwest'\\r\\n'3' = ...  \n",
       "2  '1' = 'New England'\\r\\n'2' = 'Middle Atlantic'...  \n",
       "3  '01' = 'Vacant'\\r\\n'02' = 'Office'\\r\\n'04' = '...  \n",
       "4                        1' = 'Yes'\\r\\nMissing='No'   "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "codebook_col_map = {\n",
    "    'CATEOGORIES': 'category', \n",
    "    'File order': 'file_order', \n",
    "    'Variable\\r\\nname': 'col_name', \n",
    "    'Variable type': 'col_type',\n",
    "    'Len-\\r\\ngth': 'length', \n",
    "    'Format': 'format', \n",
    "    'Label': 'col_description', \n",
    "    'Values/Format codes': 'codes', \n",
    "    'Unnamed: 8': 'empty_col' # (continued in next cell) code prompt?\n",
    "}\n",
    "df_codebook = pd.read_csv('grouped_2012microdata_codebook.csv').rename(columns=codebook_col_map).drop(['empty_col'], axis=1)\n",
    "df_codebook.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "capable-retreat",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "categories: ['0' '1' '2' '3' '4' '5' '6' '7' 'get rid of' '10']\n",
      "category = 1 columns: ['PUBID' 'REGION' 'CENDIV' 'PBA']\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>category</th>\n",
       "      <th>file_order</th>\n",
       "      <th>col_name</th>\n",
       "      <th>col_type</th>\n",
       "      <th>length</th>\n",
       "      <th>format</th>\n",
       "      <th>col_description</th>\n",
       "      <th>codes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>PUBID</td>\n",
       "      <td>Char</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Building identifier</td>\n",
       "      <td>00001 - 06720</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>REGION</td>\n",
       "      <td>Char</td>\n",
       "      <td>1.0</td>\n",
       "      <td>$REGION.</td>\n",
       "      <td>Census region</td>\n",
       "      <td>'1' = 'Northeast'\\r\\n'2' = 'Midwest'\\r\\n'3' = ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>CENDIV</td>\n",
       "      <td>Char</td>\n",
       "      <td>1.0</td>\n",
       "      <td>$CENDIV.</td>\n",
       "      <td>Census division</td>\n",
       "      <td>'1' = 'New England'\\r\\n'2' = 'Middle Atlantic'...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>PBA</td>\n",
       "      <td>Char</td>\n",
       "      <td>2.0</td>\n",
       "      <td>$PBA.</td>\n",
       "      <td>Principal building activity</td>\n",
       "      <td>'01' = 'Vacant'\\r\\n'02' = 'Office'\\r\\n'04' = '...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  category  file_order col_name col_type  length    format  \\\n",
       "0        0         1.0    PUBID     Char     5.0       NaN   \n",
       "1        0         2.0   REGION     Char     1.0  $REGION.   \n",
       "2        0         3.0   CENDIV     Char     1.0  $CENDIV.   \n",
       "3        0         4.0      PBA     Char     2.0     $PBA.   \n",
       "\n",
       "               col_description  \\\n",
       "0          Building identifier   \n",
       "1                Census region   \n",
       "2              Census division   \n",
       "3  Principal building activity   \n",
       "\n",
       "                                               codes  \n",
       "0                                      00001 - 06720  \n",
       "1  '1' = 'Northeast'\\r\\n'2' = 'Midwest'\\r\\n'3' = ...  \n",
       "2  '1' = 'New England'\\r\\n'2' = 'Middle Atlantic'...  \n",
       "3  '01' = 'Vacant'\\r\\n'02' = 'Office'\\r\\n'04' = '...  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "categories = df_codebook.category.unique()\n",
    "print(f'categories: {categories}')\n",
    "category_map = {}\n",
    "category_dfs = {}\n",
    "for cat_name in categories:\n",
    "    category_map[cat_name] = df_codebook[df_codebook['category'] == cat_name].col_name.values\n",
    "    category_dfs[cat_name] = df_codebook[df_codebook['category'] == cat_name]\n",
    "print(f\"category = 1 columns: {category_map['0']}\")\n",
    "category_dfs['0']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "possible-revision",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>category</th>\n",
       "      <th>file_order</th>\n",
       "      <th>col_name</th>\n",
       "      <th>col_type</th>\n",
       "      <th>length</th>\n",
       "      <th>format</th>\n",
       "      <th>col_description</th>\n",
       "      <th>codes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>1</td>\n",
       "      <td>50.0</td>\n",
       "      <td>PBAPLUS</td>\n",
       "      <td>Char</td>\n",
       "      <td>2.0</td>\n",
       "      <td>$PBAPLUS.</td>\n",
       "      <td>More specific building activity</td>\n",
       "      <td>'01' = 'Vacant'\\r\\n'02' = 'Administrative/prof...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>More specific building activity, continued</td>\n",
       "      <td>'28' = 'Elementary/middle school'\\r\\n'29' = 'H...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   category  file_order col_name col_type  length     format  \\\n",
       "49        1        50.0  PBAPLUS     Char     2.0  $PBAPLUS.   \n",
       "50        1         NaN      NaN      NaN     NaN        NaN   \n",
       "\n",
       "                               col_description  \\\n",
       "49             More specific building activity   \n",
       "50  More specific building activity, continued   \n",
       "\n",
       "                                                codes  \n",
       "49  '01' = 'Vacant'\\r\\n'02' = 'Administrative/prof...  \n",
       "50  '28' = 'Elementary/middle school'\\r\\n'29' = 'H...  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# NOTE: some codes span two rows\n",
    "# need to find a way to concatenate this, then update map_codes function '(continued in next cell)' condition\n",
    "category_dfs['1'].iloc[45:47]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "arbitrary-milan",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\users\\user\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\pandas\\core\\indexing.py:1676: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self._setitem_single_column(ilocs[0], value, pi)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>category</th>\n",
       "      <th>file_order</th>\n",
       "      <th>col_name</th>\n",
       "      <th>col_type</th>\n",
       "      <th>length</th>\n",
       "      <th>format</th>\n",
       "      <th>col_description</th>\n",
       "      <th>codes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1049</th>\n",
       "      <td>10</td>\n",
       "      <td>1049.0</td>\n",
       "      <td>HDD65</td>\n",
       "      <td>Num</td>\n",
       "      <td>8.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Heating degree days (base 65)</td>\n",
       "      <td>no code</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1050</th>\n",
       "      <td>10</td>\n",
       "      <td>1050.0</td>\n",
       "      <td>CDD65</td>\n",
       "      <td>Num</td>\n",
       "      <td>8.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Cooling degree days (base 65)</td>\n",
       "      <td>no code</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1051</th>\n",
       "      <td>10</td>\n",
       "      <td>1051.0</td>\n",
       "      <td>MFUSED</td>\n",
       "      <td>Char</td>\n",
       "      <td>1.0</td>\n",
       "      <td>$YESNO.</td>\n",
       "      <td>Any major fuel used</td>\n",
       "      <td>'1' = 'Yes'\\r\\n'2' = 'No'\\r\\nMissing = Not app...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1052</th>\n",
       "      <td>10</td>\n",
       "      <td>1052.0</td>\n",
       "      <td>MFBTU</td>\n",
       "      <td>Num</td>\n",
       "      <td>8.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Annual major fuel consumption (thous Btu)</td>\n",
       "      <td>no code</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1053</th>\n",
       "      <td>10</td>\n",
       "      <td>1053.0</td>\n",
       "      <td>MFEXP</td>\n",
       "      <td>Num</td>\n",
       "      <td>8.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Annual major fuel expenditures ($)</td>\n",
       "      <td>no code</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     category  file_order col_name col_type  length   format  \\\n",
       "1049       10      1049.0    HDD65      Num     8.0      NaN   \n",
       "1050       10      1050.0    CDD65      Num     8.0      NaN   \n",
       "1051       10      1051.0   MFUSED     Char     1.0  $YESNO.   \n",
       "1052       10      1052.0    MFBTU      Num     8.0      NaN   \n",
       "1053       10      1053.0    MFEXP      Num     8.0      NaN   \n",
       "\n",
       "                                col_description  \\\n",
       "1049              Heating degree days (base 65)   \n",
       "1050              Cooling degree days (base 65)   \n",
       "1051                        Any major fuel used   \n",
       "1052  Annual major fuel consumption (thous Btu)   \n",
       "1053         Annual major fuel expenditures ($)   \n",
       "\n",
       "                                                  codes  \n",
       "1049                                            no code  \n",
       "1050                                            no code  \n",
       "1051  '1' = 'Yes'\\r\\n'2' = 'No'\\r\\nMissing = Not app...  \n",
       "1052                                            no code  \n",
       "1053                                            no code  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# only category 10 has missing codes\n",
    "category_dfs['10'].loc[:,'codes'] = category_dfs['10'].codes.fillna('no code')\n",
    "category_dfs['10'].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "suited-responsibility",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "category: 0\n",
      "category: 1\n",
      "category: 2\n",
      "category: 3\n",
      "category: 4\n",
      "category: 5\n",
      "category: 6\n",
      "category: 7\n",
      "category: get rid of\n",
      "category: 10\n",
      "{0: {'00001 - 06720': 'continuous numerical range'}, 1: {'1': 'Northeast', '2': 'Midwest', '3': 'South', '4': 'West'}, 2: {'1': 'New England', '2': 'Middle Atlantic', '3': 'East North Central', '4': 'West North Central', '5': 'South Atlantic', '6': 'East South Central', '7': 'West South Central', '8': 'Mountain', '9': 'Pacific'}, 3: {'01': 'Vacant', '02': 'Office', '04': 'Laboratory', '05': 'Nonrefrigerated warehouse', '06': 'Food sales', '07': 'Public order and safety', '08': 'Outpatient health care', '11': 'Refrigerated warehouse', '12': 'Religious worship', '13': 'Public assembly', '14': 'Education', '15': 'Food service', '16': 'Inpatient health care', '17': 'Nursing', '18': 'Lodging', '23': 'Strip shopping mall', '24': 'Enclosed mall', '25': 'Retail other than mall', '26': 'Service', '91': 'Other'}}\n"
     ]
    }
   ],
   "source": [
    "all_cats_code_maps = {}\n",
    "for cat_num, df in category_dfs.items(): \n",
    "    print(f'category: {cat_num}')\n",
    "    if cat_num == 'get rid of':\n",
    "        all_cats_code_maps[cat_num] = 'no_code_map'\n",
    "    else:\n",
    "        category_code_df = category_dfs[cat_num].drop(['category', 'file_order', 'col_type', 'length', 'format',], axis=1)\n",
    "        category_code_df['code_split'] = category_code_df.codes.str.split('\\r\\n')\n",
    "        category_code_list = category_code_df.code_split.values\n",
    "        category_code_map = map_code_values(category_code_list, print_errors=True)\n",
    "        all_cats_code_maps[cat_num] = category_code_map\n",
    "print(all_cats_code_maps['0'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "confidential-tourist",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
